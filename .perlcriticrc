
# sev 5
# tl;dr - return undef returns (undef) instead of () in list context
# bare return returns undef in scalar context and () in list context
# so use that instead
# [-Subroutines::ProhibitExplicitReturnUndef]

# legitimate uses of stringy eval are now marked with no critic
#[-BuiltinFunctions::ProhibitStringyEval]

# we're enforcing this now
# [-InputOutput::ProhibitTwoArgOpen]

# sev 4

# this one is silly and horribly named. Even if I have a local copy of the
# value e.g. %ENV a later assignment of a value in there gets the error
# so just disable.
[-Variables::RequireLocalizedPunctuationVars]

# allow 'no warnings qw(once)
[TestingAndDebugging::ProhibitNoWarnings]
allow = once


# we enforce this one now too
#[-Subroutines::RequireFinalReturn]

# these two are pretty silly and I doubt we'll ever enforce them
[-InputOutput::RequireBriefOpen]
[-Subroutines::RequireArgUnpacking]
# sev 3

# don't require all regexes to use /x
[-RegularExpressions::RequireExtendedFormatting]

# allow use of 'our' and 'use vars'
[-Variables::ProhibitPackageVars]

# allow 'die' and 'warn' instead of croak/carp
[-ErrorHandling::RequireCarping]

# it doesn't like our version strings, but they should really be fine
[-ValuesAndExpressions::ProhibitComplexVersion]

# allow capturing output from backticks
[InputOutput::ProhibitBacktickOperators]
only_in_void_context = 1

# don't worry about large main sections
[-Modules::ProhibitExcessMainComplexity]

# ditto subroutines
[-Subroutines::ProhibitExcessComplexity]


